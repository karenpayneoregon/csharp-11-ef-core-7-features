// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ConsoleConfigurationLibrary.Models;
using CustomIConfigurationSourceSample.Models;
using MemoryConfigurationSourceRazorPages.Models;
using Microsoft.EntityFrameworkCore;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace CustomIConfigurationSourceSample.Data;

public partial class Context : DbContext
{
    public Context()
    {
    }

    public Context(DbContextOptions<Context> options)
        : base(options)
    {
    }

    public virtual DbSet<ConfigurationSetting> ConfigurationSettings { get; set; }
    public virtual DbSet<Setting> Settings { get; set; }

    /// <summary>
    /// Configures the database context options when used without dependency injection.
    /// </summary>
    /// <param name="optionsBuilder">
    /// An instance of <see cref="DbContextOptionsBuilder"/> used to configure the context.
    /// </param>
    /// <remarks>
    /// This method is invoked when the context is being configured. If the options are not already configured,
    /// it sets up the SQL Server provider with the main connection string retrieved from the application's configuration.
    /// </remarks>
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(GetMainConnectionString());
        }
    }

    /// <summary>
    /// Retrieves the main connection string from the application's configuration.
    /// </summary>
    /// <returns>
    /// A <see cref="string"/> representing the main connection string used for database connectivity.
    /// </returns>
    private static string GetMainConnectionString()
    {
        return Config.Configuration.JsonRoot().GetSection(nameof(ConnectionStrings)).Get<ConnectionStrings>().MainConnection;
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ConfigurationSetting>(entity =>
        {
            entity.ToTable("ConfigurationSetting");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.Property(e => e.Key).IsRequired();
            entity.Property(e => e.Section).IsRequired();
            entity.Property(e => e.Value).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}